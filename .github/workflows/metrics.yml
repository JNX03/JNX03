name: Metrics

on:
  schedule:
    # Run every Monday at 00:00 UTC instead of every day
    - cron: "0 0 * * 1"
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  github-metrics:
    runs-on: ubuntu-latest
    steps:
      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: header, activity, community, repositories
          config_timezone: Asia/Bangkok
          plugin_followup: yes
          plugin_languages: yes
          plugin_lines: yes

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.isocalendar.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_isocalendar: yes
          plugin_isocalendar_duration: full-year

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.languages.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_languages: yes
          plugin_languages_limit: 8
          plugin_languages_ignored: html,css,scss

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.lines.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_lines: yes

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.achievements.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_achievements: yes
          plugin_achievements_display: compact
          plugin_achievements_ignored: projects

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.stargazers.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_stargazers: yes

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.followers.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_people: yes
          plugin_people_limit: 28
          plugin_people_types: followers

      - name: Generate Awards Metrics
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Create Awards SVG
        run: |
          cat > awards-generator.js << 'EOF'
          const fs = require('fs');
          
          // Function to escape XML/HTML entities
          function escapeXml(text) {
            return text.replace(/&/g, '&amp;')
                      .replace(/</g, '&lt;')
                      .replace(/>/g, '&gt;')
                      .replace(/"/g, '&quot;')
                      .replace(/'/g, '&#39;');
          }
          
          const awards = {
            competitions: {
              "INDEXS": {
                url: "Index.jnx03.xyz",
                status: "App - Wait for review",
                awards: ["NSC", "INTEL", "TIA"]
              },
              "MooDong": {
                awards: ["1st MIT Moodeng AI Challenge"]
              },
              "Syntaxia": {
                awards: ["Winner WWDC 2025"]
              }
            },
            personal: {
              "HMO": {
                name: "Hear me once"
              },
              "SecureNetKit": {
                links: ["PyPI", "NPM"],
                urls: ["test.pypi.org/project/jnxbetasec", "npmjs.com/package/jnxbetasec"]
              },
              "Acora": {
                url: "Acora.jnx03.xyz"
              }
            },
            teamArchive: {
              "Eibraille": {
                awards: ["1st ISEF", "1st INTEL", "1st TICTA 2024", "2nd APICTA 2024", "Merit SCI-PROJECT", "2nd NSC 2024", "1st YSC 2024", "1st TIA 2024", "1st AI INNOVATOR CMKL 2024"]
              },
              "PETRA": {
                awards: ["2nd Samsung Solve for Tomorrow 2024", "Merit MEDCHICK 2025"]
              },
              "ALDS": {
                awards: ["Samsung Solve for Tomorrow 2024"]
              },
              "PASX+": {
                awards: ["2nd TICTA 2023", "2nd APICTA 2023"]
              },
              "Kamora": {
                awards: ["FTC Thailand 2024"]
              },
              "WrPower": {
                awards: ["FLL 2023"]
              },
              "WasteTD": {
                awards: ["Finalist GoSoft Hackathon"]
              }
            },
            teamOngoing: {
              "MalariaX": {
                awards: ["1st SCI-Project", "Stage 2 INTEL 2025"]
              },
              "CytoScanZ": {
                awards: ["1st SCI-Project", "1st INTEL 2025"]
              },
              "NeuroSync PlayKit": {
                status: "On going - Samsung Solve for Tomorrow 2025"
              }
            },
            contributions: [
              "Monkey Type",
              "ultralytics", 
              "THU-MIG(YoloV10)",
              "rigvedrs/YOLO-V12-CAM"
            ]
          };

          // Simple, compatible awards display
          function createAwardBadge(text, color = '#586069') {
            const width = Math.max(text.length * 6.5 + 12, 45);
            const escapedText = escapeXml(text);
            return {
              width,
              svg: `<rect x="0" y="0" width="${width}" height="18" rx="3" fill="${color}"/>
                   <text x="${width/2}" y="12" text-anchor="middle" fill="#ffffff" font-family="Arial,sans-serif" font-size="10" font-weight="bold">${escapedText}</text>`
            };
          }

          let svgContent = '';
          let currentY = 20;

          // Simple header
          svgContent += `
            <rect x="0" y="0" width="800" height="50" fill="#f6f8fa" stroke="#d0d7de" stroke-width="1"/>
            <text x="400" y="25" text-anchor="middle" fill="#24292f" font-family="Arial,sans-serif" font-size="18" font-weight="bold">üèÜ JNX03 Awards & Recognition</text>
            <text x="400" y="40" text-anchor="middle" fill="#656d76" font-family="Arial,sans-serif" font-size="12">Competitions ‚Ä¢ Projects ‚Ä¢ Open Source</text>
          `;
          currentY += 70;

          function addSection(title, projects, isWide = false) {
            // Section header
            svgContent += `<rect x="10" y="${currentY}" width="780" height="2" fill="#d0d7de"/>`;
            currentY += 15;
            svgContent += `<text x="15" y="${currentY}" fill="#24292f" font-family="Arial,sans-serif" font-size="14" font-weight="bold">${escapeXml(title)}</text>`;
            currentY += 25;

            Object.entries(projects).forEach(([name, data]) => {
              // Project name
              svgContent += `<text x="20" y="${currentY}" fill="#0969da" font-family="Arial,sans-serif" font-size="12" font-weight="bold">${escapeXml(name)}</text>`;
              currentY += 18;

              // URL/Status
              if (data.url) {
                svgContent += `<text x="25" y="${currentY}" fill="#656d76" font-family="Arial,sans-serif" font-size="10">üåê ${escapeXml(data.url)}</text>`;
                currentY += 14;
              }
              if (data.status) {
                svgContent += `<text x="25" y="${currentY}" fill="#656d76" font-family="Arial,sans-serif" font-size="10">üìù ${escapeXml(data.status)}</text>`;
                currentY += 14;
              }
              if (data.name) {
                svgContent += `<text x="25" y="${currentY}" fill="#656d76" font-family="Arial,sans-serif" font-size="10">${escapeXml(data.name)}</text>`;
                currentY += 14;
              }
              if (data.urls) {
                data.urls.forEach(url => {
                  svgContent += `<text x="25" y="${currentY}" fill="#656d76" font-family="Arial,sans-serif" font-size="9">üîó ${escapeXml(url)}</text>`;
                  currentY += 12;
                });
              }

              // Links badges
              if (data.links) {
                let badgeX = 25;
                data.links.forEach(link => {
                  const badge = createAwardBadge(link, '#0969da');
                  svgContent += `<g transform="translate(${badgeX}, ${currentY - 14})">${badge.svg}</g>`;
                  badgeX += badge.width + 5;
                });
                currentY += 8;
              }

              // Awards badges
              if (data.awards && data.awards.length > 0) {
                let badgeX = 25;
                data.awards.forEach(award => {
                  let color = '#28a745'; // Default green
                  if (award.includes('1st')) color = '#ffd700'; // Gold
                  else if (award.includes('2nd') || award.includes('2rd')) color = '#c0c0c0'; // Silver
                  else if (award.includes('Winner')) color = '#dc3545'; // Red
                  else if (award.includes('Finalist')) color = '#17a2b8'; // Teal
                  else if (award.includes('Merit')) color = '#fd7e14'; // Orange

                  const badge = createAwardBadge(award, color);
                  
                  // Wrap to next line if too wide
                  if (badgeX + badge.width > 750) {
                    badgeX = 25;
                    currentY += 22;
                  }
                  
                  svgContent += `<g transform="translate(${badgeX}, ${currentY - 14})">${badge.svg}</g>`;
                  badgeX += badge.width + 5;
                });
                currentY += 8;
              }
              currentY += 15; // Space between projects
            });
            currentY += 10; // Extra space after section
          }

          // Add all sections
          addSection('üèÜ Competition Projects', awards.competitions);
          addSection('üíª Personal Projects', awards.personal);
          addSection('üîí Team Projects (Archive)', awards.teamArchive, true);
          addSection('üöÄ Team Projects (Ongoing)', awards.teamOngoing);

          // Open source contributions
          svgContent += `<rect x="10" y="${currentY}" width="780" height="2" fill="#d0d7de"/>`;
          currentY += 15;
          svgContent += `<text x="15" y="${currentY}" fill="#24292f" font-family="Arial,sans-serif" font-size="14" font-weight="bold">ü§ù Open Source Contributions</text>`;
          currentY += 25;

          let contribX = 20;
          awards.contributions.forEach(contrib => {
            const badge = createAwardBadge(contrib, '#6f42c1');
            if (contribX + badge.width > 750) {
              contribX = 20;
              currentY += 25;
            }
            svgContent += `<g transform="translate(${contribX}, ${currentY - 12})">${badge.svg}</g>`;
            contribX += badge.width + 8;
          });

          currentY += 30;

          const finalSvg = `<svg width="800" height="${currentY}" xmlns="http://www.w3.org/2000/svg">
            ${svgContent}
          </svg>`;

          fs.writeFileSync('github-awards-metrics.svg', finalSvg);
          console.log('Awards metrics SVG generated successfully!');
          EOF

          node awards-generator.js
          
      - name: Commit Awards SVG
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add github-awards-metrics.svg
          git diff --staged --quiet || git commit -m "Update github-awards-metrics.svg - [Skip GitHub Action]"
          git push
