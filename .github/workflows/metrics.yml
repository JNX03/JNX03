name: Metrics

on:
  schedule:
    # Run every Monday at 00:00 UTC instead of every day
    - cron: "0 0 * * 1"
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  github-metrics:
    runs-on: ubuntu-latest
    steps:
      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: header, activity, community, repositories
          config_timezone: Asia/Bangkok
          plugin_followup: yes
          plugin_languages: yes
          plugin_lines: yes

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.isocalendar.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_isocalendar: yes
          plugin_isocalendar_duration: full-year

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.languages.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_languages: yes
          plugin_languages_limit: 8
          plugin_languages_ignored: html,css,scss

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.lines.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_lines: yes

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.achievements.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_achievements: yes
          plugin_achievements_display: compact
          plugin_achievements_ignored: projects

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.stargazers.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_stargazers: yes

      - uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.followers.svg
          token: ${{ secrets.METRICS_TOKEN }}
          user: JNX03
          template: classic
          base: ""
          config_timezone: Asia/Bangkok
          plugin_people: yes
          plugin_people_limit: 28
          plugin_people_types: followers

      - name: Generate Awards Metrics
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Create Awards SVG
        run: |
          cat > awards-generator.js << 'EOF'
          const fs = require('fs');
          
          // Function to escape XML/HTML entities
          function escapeXml(text) {
            return text.replace(/&/g, '&amp;')
                      .replace(/</g, '&lt;')
                      .replace(/>/g, '&gt;')
                      .replace(/"/g, '&quot;')
                      .replace(/'/g, '&#39;');
          }
          
          const awards = {
            competitions: {
              "INDEXS": {
                url: "Index.jnx03.xyz",
                status: "App - Wait for review",
                awards: ["NSC", "INTEL", "TIA"]
              },
              "MooDong": {
                awards: ["1st MIT Moodeng AI Challenge"]
              },
              "Syntaxia": {
                awards: ["Winner WWDC 2025"]
              }
            },
            personal: {
              "HMO": {
                name: "Hear me once"
              },
              "SecureNetKit": {
                links: ["PyPI", "NPM"],
                urls: ["test.pypi.org/project/jnxbetasec", "npmjs.com/package/jnxbetasec"]
              },
              "Acora": {
                url: "Acora.jnx03.xyz"
              }
            },
            teamArchive: {
              "Eibraille": {
                awards: ["1st ISEF", "1st INTEL", "1st TICTA 2024", "2nd APICTA 2024", "Merit SCI-PROJECT", "2nd NSC 2024", "1st YSC 2024", "1st TIA 2024", "1st AI INNOVATOR CMKL 2024"]
              },
              "PETRA": {
                awards: ["2nd Samsung Solve for Tomorrow 2024", "Merit MEDCHICK 2025"]
              },
              "ALDS": {
                awards: ["Samsung Solve for Tomorrow 2024"]
              },
              "PASX+": {
                awards: ["2nd TICTA 2023", "2nd APICTA 2023"]
              },
              "Kamora": {
                awards: ["FTC Thailand 2024"]
              },
              "WrPower": {
                awards: ["FLL 2023"]
              },
              "WasteTD": {
                awards: ["Finalist GoSoft Hackathon"]
              }
            },
            teamOngoing: {
              "MalariaX": {
                awards: ["1st SCI-Project", "Stage 2 INTEL 2025"]
              },
              "CytoScanZ": {
                awards: ["1st SCI-Project", "1st INTEL 2025"]
              },
              "NeuroSync PlayKit": {
                status: "On going - Samsung Solve for Tomorrow 2025"
              }
            },
            contributions: [
              "Monkey Type",
              "ultralytics", 
              "THU-MIG(YoloV10)",
              "rigvedrs/YOLO-V12-CAM"
            ]
          };

          // Create a clean, horizontal layout like GitHub metrics
          function createAwardBadge(text, color = '#586069', textColor = '#ffffff') {
            const width = Math.max(text.length * 6.5 + 14, 50);
            const escapedText = escapeXml(text);
            return {
              width,
              svg: `<rect x="0" y="0" width="${width}" height="18" rx="3" fill="${color}" opacity="0.8"/>
                   <text x="${width/2}" y="12" text-anchor="middle" fill="${textColor}" font-family="-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif" font-size="10" font-weight="500">${escapedText}</text>`
            };
          }

          // Horizontal layout with sections side by side
          let svgContent = '';
          let maxHeight = 0;

          // Section 1: Competition Awards (Left column)
          let section1 = '';
          let y1 = 20;
          section1 += `<text x="15" y="${y1}" fill="#24292f" font-family="-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif" font-size="12" font-weight="600">üèÜ Competition Awards</text>`;
          y1 += 20;

          // Key competitions with top awards
          const keyComps = [
            { name: 'Eibraille', awards: ['1st ISEF', '1st INTEL', '1st TICTA 2024', '2nd NSC 2024'] },
            { name: 'MooDong', awards: ['1st MIT AI Challenge'] },
            { name: 'Syntaxia', awards: ['Winner WWDC 2025'] },
            { name: 'MalariaX', awards: ['1st SCI-Project', 'Stage 2 INTEL 2025'] }
          ];

          keyComps.forEach(comp => {
            section1 += `<text x="20" y="${y1}" fill="#0969da" font-family="-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif" font-size="11" font-weight="500">${escapeXml(comp.name)}</text>`;
            y1 += 15;
            
            let x1 = 25;
            comp.awards.slice(0, 2).forEach(award => { // Show top 2 awards
              let color = '#28a745';
              if (award.includes('1st')) color = '#ffd700';
              else if (award.includes('2nd')) color = '#c0c0c0';
              else if (award.includes('Winner')) color = '#f85149';
              
              const badge = createAwardBadge(award, color);
              section1 += `<g transform="translate(${x1}, ${y1-12})">${badge.svg}</g>`;
              x1 += badge.width + 5;
            });
            y1 += 18;
          });

          maxHeight = Math.max(maxHeight, y1);

          // Section 2: Active Projects (Middle column)
          let section2 = '';
          let y2 = 20;
          const col2X = 240;
          section2 += `<text x="${col2X}" y="${y2}" fill="#24292f" font-family="-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif" font-size="12" font-weight="600">üöÄ Active Projects</text>`;
          y2 += 20;

          const activeProjects = [
            { name: 'INDEXS', status: 'NSC ‚Ä¢ INTEL ‚Ä¢ TIA', url: 'Index.jnx03.xyz' },
            { name: 'CytoScanZ', awards: ['1st SCI-Project', '1st INTEL 2025'] },
            { name: 'NeuroSync PlayKit', status: 'Samsung Solve 2025' },
            { name: 'SecureNetKit', links: ['PyPI', 'NPM'] }
          ];

          activeProjects.forEach(proj => {
            section2 += `<text x="${col2X + 5}" y="${y2}" fill="#0969da" font-family="-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif" font-size="11" font-weight="500">${escapeXml(proj.name)}</text>`;
            y2 += 15;

            if (proj.awards) {
              let x2 = col2X + 10;
              proj.awards.slice(0, 2).forEach(award => {
                const badge = createAwardBadge(award, '#28a745');
                section2 += `<g transform="translate(${x2}, ${y2-12})">${badge.svg}</g>`;
                x2 += badge.width + 5;
              });
            } else if (proj.status) {
              section2 += `<text x="${col2X + 10}" y="${y2}" fill="#656d76" font-family="-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif" font-size="10">${escapeXml(proj.status)}</text>`;
            } else if (proj.links) {
              let x2 = col2X + 10;
              proj.links.forEach(link => {
                const badge = createAwardBadge(link, '#0969da');
                section2 += `<g transform="translate(${x2}, ${y2-12})">${badge.svg}</g>`;
                x2 += badge.width + 5;
              });
            }
            y2 += 18;
          });

          maxHeight = Math.max(maxHeight, y2);

          // Section 3: Open Source (Right column)
          let section3 = '';
          let y3 = 20;
          const col3X = 460;
          section3 += `<text x="${col3X}" y="${y3}" fill="#24292f" font-family="-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif" font-size="12" font-weight="600">ü§ù Open Source</text>`;
          y3 += 20;

          let x3 = col3X + 5;
          awards.contributions.forEach(contrib => {
            const badge = createAwardBadge(contrib, '#6f42c1');
            section3 += `<g transform="translate(${x3}, ${y3-12})">${badge.svg}</g>`;
            y3 += 22;
          });

          maxHeight = Math.max(maxHeight, y3);

          // Combine all sections
          svgContent = section1 + section2 + section3;

          const finalSvg = `<svg width="700" height="${maxHeight + 10}" xmlns="http://www.w3.org/2000/svg" class="">
            ${svgContent}
          </svg>`;

          fs.writeFileSync('github-awards-metrics.svg', finalSvg);
          console.log('Awards metrics SVG generated successfully!');
          EOF

          node awards-generator.js
          
      - name: Commit Awards SVG
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add github-awards-metrics.svg
          git diff --staged --quiet || git commit -m "Update github-awards-metrics.svg - [Skip GitHub Action]"
          git push
